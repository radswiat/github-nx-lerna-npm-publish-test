name: publish
on:
  push:
    branches: ['main']
  # When Release Pull Request is merged
#  pull_request:
#    branches:
#      - master
#    types: [closed]

permissions:
  contents: write # for checkout and tag
  pull-requests: write  # for comments
  packages: write # for publish

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'
#      - name: Git Identity
#        run: |
#          git config --global user.name 'github-actions[bot]'
#          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: yarn install
      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

#      - name: Use NPM Token with organization read access
#        uses: dkershner6/use-npm-token-action@v1
#        with:
#          token: "${{ secrets.NPM_TOKEN }}"
##          workspace: ./node

      - name: Publish
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
        run: |
          npm config set registry "https://registry.npmjs.com/"
          npm config set _authToken=${{ secrets.NPM_TOKEN }}
          yarn lerna publish from-package --yes

#          npm config set //registry.npmjs.org/:_authToken ${{secrets.NPM_TOKEN}}
#      - name: Tag Check
#        id: tag_check
#        run: |
#          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
#          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
#            -H "Authorization: token ${GITHUB_TOKEN}")
#          if [ "$http_status_code" -ne "404" ] ; then
#            echo "::set-output name=exists_tag::true"
#          else
#            echo "::set-output name=exists_tag::false"
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Create Git Tag
#        if: steps.tag_check.outputs.exists_tag == 'false'
#        uses: pkgdeps/git-tag-action@v2
#        with:
#          version: ${{ env.CURRENT_VERSION }}
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          github_repo: ${{ github.repository }}
#          git_commit_sha: ${{ github.sha }}
#          git_tag_prefix: "v"
#      - name: Create Release
#        id: create_release
#        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ env.CURRENT_VERSION }}
#          # Copy Pull Request's tile and body to Release Note
#          release_name: ${{ github.event.pull_request.title }}
#          body: |
#            ${{ github.event.pull_request.body }}
#          draft: false
#          prerelease: false

#      - name: Prepare
#        #        if: steps.tag_check.outputs.exists_tag == 'false'
#        run: |
#          git update-index --assume-unchanged .npmrc
#          git status
#          git add .
#          git commit -a -m 'Release [skip ci]' -n
#          git branch -D tmp
#          git checkout -b tmp
#          git remote update
#          git checkout master
#          git merge tmp
